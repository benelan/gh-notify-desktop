#!/usr/bin/env bash

# GitHub desktop notifications. Designed for polling the API responsibly by
# checking Last-Modified and adhering to X-Poll-Interval before making requests
# https://docs.github.com/en/rest/activity/notifications?apiVersion=2022-11-28
#
# Usage: run the extension in a systemd timer or cronjob, for example:
# */2 * * * * bash -l -c 'gh notify-desktop -p'

: "${DISPLAY=:0}"
: "${XAUTHORITY=~/.Xauthority}"
: "${DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus}"
: "${GH_TOKEN=$(gh auth token)}"

export DISPLAY XAUTHORITY GH_TOKEN DBUS_SESSION_BUS_ADDRESS

EXTENSION_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
DATA_DIR="${GH_ND_DATA_DIR:-${XDG_STATE_HOME:-$HOME/.local/state}/gh-notify-desktop}"
mkdir -p "$DATA_DIR"

# https://github.com/logos
if [ -f "$GH_ND_ICON" ]; then
    ICON="$GH_ND_ICON"
elif [ "$GH_ND_ICON" = "dark" ] && [ -f "$EXTENSION_DIR/img/github-mark.svg" ]; then
    ICON="$EXTENSION_DIR/img/github-mark.svg"
elif [ -f "$EXTENSION_DIR/img/github-mark-white.svg" ]; then
    ICON="$EXTENSION_DIR/img/github-mark-white.svg"
fi

if ! [[ $GH_ND_MAX =~ ^[0-9]+$ ]] || [[ $GH_ND_MAX -gt 50 ]]; then
    GH_ND_MAX=50
fi

PARTICIPATING=false
ALL=false

_has() { command -v "$1" >/dev/null 2>&1; }

if [ -z "$GH_ND_OPEN_CMD" ]; then
    if [ -n "$GH_BROWSER" ]; then
        GH_ND_OPEN_CMD="$GH_BROWSER" # User override
    elif _has wslview; then
        GH_ND_OPEN_CMD="wslview" # Windows (WSL)
    elif _has xdg-open; then
        GH_ND_OPEN_CMD="xdg-open" # Linux
    elif _has open; then
        GH_ND_OPEN_CMD="open" # OSX
    else
        GH_ND_OPEN_CMD="$BROWSER" # Fallback
    fi
fi

die() {
    printf "%s\n" "$@" >&2
    echo "Try -h for usage information." >&2
}

help() {
    printf "
An extension for displaying GitHub notifications on your desktop, designed for
polling with a task scheduler. For example, using a cronjob:
    */1 * * * * bash -l -c 'gh notify-desktop'

Usage:
    gh notify-desktop [-Cchp] [-i <icon_path>]

Flags:
    -p     Only display notifications for 'participating' threads
    -i     Path to an image, defaults to GitHub's logo (linux only)
    -c     Save the unread notifications count when new ones are recieved
    -C     Save/print the unread count, skip displaying desktop notifications
    -h     Show this help message.

Environment Variables:
    GH_ND_DATA_DIR
        The directory for data storage, including the unread notification count.
        Defaults to ~/.local/state/gh-notify-desktop/
    GH_ND_MAX
        The maximum number of notifications to display at once.
        Cannot be greater than 50, which is the default.
    GH_ND_ICON
        The path to an icon to display in the desktop notifications (linux only).
        Defaults to GitHub's logo, and is ignored when the -i flag is specified.
    DEBUG
        Print debug info, skip poll-interval/last-modified checks, and display
        desktop notifications even when io streams are a tty.

Source: https://github.com/benelan/gh-notify-desktop
"
    exit 0
}

gh_rest_api() {
    command gh api \
        -H "Accept: application/vnd.github+json" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        "$@"
}

check_poll_interval() {
    local now last_checked time_since_last_check poll_interval remaining_poll_wait

    now="$(date +'%s')"
    last_checked="$(cat "$DATA_DIR/last-checked" 2>/dev/null)"

    if [ -n "$last_checked" ]; then
        time_since_last_check=$((now - last_checked))
        poll_interval="$(cat "$DATA_DIR/poll-interval" 2>/dev/null)"

        if [ -n "$poll_interval" ]; then
            remaining_poll_wait=$((poll_interval - time_since_last_check))

            if [ "$remaining_poll_wait" -gt 0 ]; then
                echo "Please wait $remaining_poll_wait seconds before checking for GitHub notifications again" >&2
                exit 3
            fi
        fi
    fi

    echo "$now" >"$DATA_DIR/last-checked"
}

get_unread_notifications_count() {
    local count

    count="$(
        gh_rest_api "/notifications?participating=$PARTICIPATING" \
            --paginate --jq 'length' | awk '{s+=$1} END {print s}'
    )"

    [ -n "$DEBUG" ] && echo "unread notification count: $count" >&2

    if [[ $count =~ ^[0-9]+$ ]]; then
        echo "$count" >"$DATA_DIR/unread_count"
    fi
}

get_notifications() {
    local headers status_code last_modified poll_interval

    resp="$(
        # jq expression adopted from https://github.com/meiji163/gh-notify
        gh_rest_api -i "/notifications?participating=$PARTICIPATING&all=$ALL" \
            -H "If-Modified-Since: $(
                [ -z "$DEBUG" ] && cat "$DATA_DIR/last-modified" 2>/dev/null
            )" \
            --jq $'.[] | {
            thread_id: .id,
            thread_state: (if .unread then "UNREAD" else "READ" end),
            comment_number: .subject.latest_comment_url | tostring | split("/") | last,
            repo_slug: .repository.full_name,
            type: .subject.type,
            url: .subject.url | tostring,
            reason: .reason,
            title: .subject.title
            } | [
            .thread_id, .thread_state, .comment_number,
            .repo_slug, .type, .url, .reason, .title
        ] | @tsv' 2>/dev/null
    )"

    [ -n "$DEBUG" ] && echo "$resp" >&2

    headers="$(awk -v 'RS=\r\n\r\n' 'NR==1 {print}' <<<"$resp")"
    body="$(awk -v 'RS=\r\n\r\n' 'NR==2 {print}' <<<"$resp")"

    [ -n "$body" ] && echo "$body" >"$DATA_DIR/body"

    status_code="$(head -n1 <<<"$headers" | cut -d ' ' -f2)"

    last_modified="$(
        grep --ignore-case last-modified <<<"$headers" |
            awk -F ': ' '{print $2}'
    )"

    poll_interval="$(
        grep --ignore-case x-poll-interval <<<"$headers" |
            awk -F ': ' '{print $2}' |
            tr -dc '[:digit:]'
    )"

    if [ -n "$last_modified" ]; then
        echo "$last_modified" >"$DATA_DIR/last-modified"
    fi

    if [ -n "$poll_interval" ]; then
        echo "$poll_interval" >"$DATA_DIR/poll-interval"
    fi

    case $status_code in
        200)
            # don't create a desktop notification if the io streams are a tty
            if [ -z "$DEBUG" ] && [ -t 0 ] && [ -t 1 ]; then
                echo "$body" >&2
                exit 0
            fi

            # show one notification if the count is more than the specified max
            if [[ $(wc -l <<<"$body") -ge $GH_ND_MAX ]]; then
                notify_max &
            # otherwise, create a desktop notification per github notification
            else
                process_page "$body"
            fi

            # get the count of unread notifications for use in a statusbar
            if [ -n "$COUNT_UNREAD" ]; then
                get_unread_notifications_count
            fi
            ;;
        304)
            echo "Up to date on GitHub notifications" >&2
            exit 3
            ;;
        401)
            printf '%s\n' \
                'Error: Requires authentication.' \
                'Ensure the gh token has notifications privileges:' \
                '$ gh auth refresh -h github.com -s notifications' >&2
            exit 4
            ;;
        *)
            echo "GitHub responded with status code $status_code" >&2
            exit 2
            ;;
    esac
}

# Processes a page of GitHub notifications, extracting and formatting relevant details.
process_page() {
    local page="$1" unhashed_number number=""
    while IFS=$'\t' read -r thread_id thread_state comment_number repo_slug type url reason title; do
        if ! command grep -q "^null" <<<"$url"; then
            if ! output=$(process_url "$type" "$url"); then
                return 1
            fi
            read -r number modified_type <<<"$output"
            if [[ -z $number ]]; then
                continue
            fi
        fi

        notify_thread "$thread_id" "$thread_state" "$comment_number" "$repo_slug" \
            "${modified_type:-$type}" "$number" "$reason" "$title" &
    done <<<"$page"
}

# Extracts and formats relevant information from a GitHub URL based on its type
# Returns: a number and optionally a new type, or raises an error for release types
process_url() {
    local type="$1" url="$2" number prerelease
    if command grep -q "Commit" <<<"$type"; then
        # https://blog.cuviper.com/2013/11/10/how-short-can-git-abbreviate/
        command basename "$url" | command head -c 12
    elif command grep -q "Release" <<<"$type"; then
        if IFS=$'\t' read -r number prerelease < <(
            gh api "$url" --cache=100h -H "X-GitHub-Api-Version: 2022-11-28" \
                --jq '[.tag_name, .prerelease] | @tsv'
        ); then
            if "$prerelease"; then
                echo "$number Pre-release"
            else
                echo "$number"
            fi
        fi
    else
        # Minimize gh API calls as they are time-consuming
        echo "${url/*\//#}"
    fi
}

construct_url() {
    local unhashed_number thread_id="$1" thread_state="$2" comment_number="$1" repo_slug="$2" type="$3" number="$4"
    unhashed_number=$(command tr -d "#" <<<"$number")
    case "$type" in
        CheckSuite)
            echo "https://github.com/${repo_slug}/actions"
            ;;
        Commit)
            echo "https://github.com/${repo_slug}/commit/${number}"
            ;;
        Discussion)
            echo "https://github.com/${repo_slug}/discussions/"
            ;;
        Pre-release | Release)
            echo "https://github.com/${repo_slug}/releases/tag/${number}"
            ;;
        Issue | PullRequest)
            if [ -z "$comment_number" ] ||
                [ "$comment_number" = "$unhashed_number" ] ||
                [ "$comment_number" = "null" ]; then
                echo "https://github.com/${repo_slug}/issues/${unhashed_number}"
            else
                echo "https://github.com/${repo_slug}/issues/${unhashed_number}#issuecomment-${comment_number}"
            fi
            ;;
        *)
            echo "https://github.com/${repo_slug}"
            ;;
    esac
}

notify_max() {
    local title="GitHub Notifications"
    local body="There are ${GH_ND_MAX}+ new GitHub notifications"

    if _has dunstify; then
        local cli_action action_response terminal flags="" query=""

        # Add dunstify action to open if the gh-notify extension is installed
        # https://github.com/meiji163/gh-notify
        if gh extension list 2>/dev/null | grep -q 'gh notify' 2>/dev/null; then
            cli_action="cli,open in gh-notify"

            # determine which terminal to use for opening gh-notify
            if _has x-terminal-emulator; then
                terminal=x-terminal-emulator
            elif _has wezterm; then
                terminal=wezterm
            elif _has alacritty; then
                terminal=alacritty
            elif _has kitty; then
                terminal=kitty
            elif _has ghostty && [ "$(uname -s)" = "Linux" ]; then
                terminal=ghostty
            elif _has foot && [ "$XDG_SESSION_TYPE" = "wayland" ]; then
                terminal=foot
            else
                unset cli_action
            fi
        fi

        action_response=$(
            dunstify "$title" "$body" -a "gh-notify-desktop" ${ICON:+-i "$ICON"} \
                -A "web,open in browser" ${cli_action:+-A "$cli_action"}
        )

        if [ "$PARTICIPATING" = true ]; then
            query+="reason%3Aparticipating&"
            flags+=" -p"
        fi

        if [ "$ALL" = false ]; then
            query+="is%3Aunread"
        else
            flags+=" -a"
        fi

        case "$action_response" in
            web) ${GH_ND_OPEN_CMD} "https://github.com/notifications?query=$query" ;;
            cli) $terminal -e sh -c "gh notify$flags" ;;
        esac
    elif _has notify-send; then
        notify-send "$title" "$body" -a "gh-notify-desktop" ${ICON:+-i "$ICON"}
    elif _has osascript; then
        osascript -e "display notification \"$body\" with title \"$title\""
    else
        die "notification support not found." \
            "Supports: dunstify, notify-send, osascript"
    fi
}

notify_thread() {
    local cli_action action_response flags url thread_id="$1" thread_state="$2" \
        comment_number="$3" repo_slug="$4" type="$5" number="$6" reason="$7" title="$8"

    url="$(construct_url "$comment_number" "$repo_slug" "$type" "$number")"

    local notif_title="[$repo_slug] $type: $reason"
    local notif_body="$title\n${url}"

    if _has dunstify; then
        action_response=$(
            dunstify "$notif_title" "$title" -a "gh-notify-desktop" \
                ${ICON:+-i "$ICON"} \
                -A "web,open in browser" \
                -A "read,mark as read" \
                -A "done,mark as done" \
                -A "unsub,unsubscribe"
        )
        case "$action_response" in
            web) ${GH_ND_OPEN_CMD} "${url}" ;;
            read) gh_rest_api --method PATCH "/notifications/threads/$thread_id" ;;
            done) gh_rest_api --method DELETE "/notifications/threads/$thread_id" ;;
            unsub) gh_rest_api --method DELETE "/notifications/threads/$thread_id/subscription" ;;
        esac
    elif _has notify-send; then
        notify-send "$notif_title" "$notif_body" \
            -a "gh-notify-desktop" ${ICON:+-i "$ICON"}
    elif _has osascript; then
        osascript -e "display notification \"$notif_body\" with title \"$notif_title\""
    else
        die "notification support not found." \
            "Supports: dunstify, notify-send, osascript"
    fi
}

while getopts :i:Ccaph opt; do
    case $opt in
        a) ALL=true ;;
        p) PARTICIPATING=true ;;
        c) COUNT_UNREAD=true ;;
        C) ONLY_COUNT_UNREAD=true ;;
        i) [ -f "$OPTARG" ] && ICON="$OPTARG" ;;
        h) help ;;
        *) die "Error: invalid option: '-${OPTARG}'" ;;
    esac
done

shift "$((OPTIND - 1))"

if [ -n "$ONLY_COUNT_UNREAD" ]; then
    get_unread_notifications_count
    cat "$DATA_DIR/unread_count"
    exit 0
fi

[ -z "$DEBUG" ] && check_poll_interval
get_notifications
