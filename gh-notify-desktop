#!/usr/bin/env bash

# GitHub desktop notifications. Designed for polling the API responsibly by
# checking Last-Modified and adhering to X-Poll-Interval before making requests
# https://docs.github.com/en/rest/activity/notifications?apiVersion=2022-11-28
#
# Usage: run the extension in a systemd timer or cronjob, for example:
# */2 * * * * bash -l -c 'gh notify-desktop -p >> ~/.local/state/gh-notify-desktop/log 2>&1'

: "${DISPLAY=:0}"
: "${XAUTHORITY=~/.Xauthority}"
: "${DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus}"
: "${GH_TOKEN=$(gh auth token)}"

export DISPLAY XAUTHORITY GH_TOKEN DBUS_SESSION_BUS_ADDRESS

EXTENSION_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
DATA_DIR="${GH_ND_DATA_DIR:-${XDG_STATE_HOME:-$HOME/.local/state}/gh-notify-desktop}"
mkdir -p "$DATA_DIR"

# https://github.com/logos
if [ -f "$GH_ND_ICON" ]; then
    ICON="$GH_ND_ICON"
elif [ "$GH_ND_ICON" = "dark" ] && [ -f "$EXTENSION_DIR/img/github-mark.svg" ]; then
    ICON="$EXTENSION_DIR/img/github-mark.svg"
elif [ -f "$EXTENSION_DIR/img/github-mark-white.svg" ]; then
    ICON="$EXTENSION_DIR/img/github-mark-white.svg"
fi

PARTICIPATING=false
ALL=false

_has() { command -v "$1" >/dev/null 2>&1; }

if [ -z "$GH_ND_OPEN_CMD" ]; then
    if [ -n "$GH_BROWSER" ]; then
        GH_ND_OPEN_CMD="$GH_BROWSER" # User override
    elif _has wslview; then
        GH_ND_OPEN_CMD="wslview" # Windows (WSL)
    elif _has xdg-open; then
        GH_ND_OPEN_CMD="xdg-open" # Linux
    elif _has open; then
        GH_ND_OPEN_CMD="open" # OSX
    else
        GH_ND_OPEN_CMD="$BROWSER" # Fallback
    fi
fi

die() {
    echo "Something went wrong..." >&2
    exit 1
}

gh_rest_api() {
    command gh api \
        -H "Accept: application/vnd.github+json" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        "$@"
}

check_poll_interval() {
    local now last_checked time_since_last_check poll_interval remaining_poll_wait

    now="$(date +'%s')"
    last_checked="$(cat "$DATA_DIR/last-checked" 2>/dev/null)"

    if [ -n "$last_checked" ]; then
        time_since_last_check=$((now - last_checked))
        poll_interval="$(cat "$DATA_DIR/poll-interval" 2>/dev/null)"

        if [ -n "$poll_interval" ]; then
            remaining_poll_wait=$((poll_interval - time_since_last_check))

            if [ "$remaining_poll_wait" -gt 0 ]; then
                echo "Please wait $remaining_poll_wait seconds before checking for GitHub notifications again" >&2
                exit 3
            fi
        fi
    fi

    echo "$now" >"$DATA_DIR/last-checked"
}

check_response_headers() {
    local headers status_code last_modified poll_interval

    resp="$(
        # jq expression adopted from https://github.com/meiji163/gh-notify
        gh_rest_api -i "/notifications?participating=$PARTICIPATING&all=$ALL" \
            -H "If-Modified-Since: $(
                [ -z "$DEBUG" ] && cat "$DATA_DIR/last-modified" 2>/dev/null
            )" \
            --jq $'.[] | {
            thread_id: .id,
            thread_state: (if .unread then "UNREAD" else "READ" end),
            comment_number: .subject.latest_comment_url | tostring | split("/") | last,
            repo_slug: .repository.full_name,
            type: .subject.type,
            url: .subject.url | tostring,
            reason: .reason,
            title: .subject.title
            } | [
            .thread_id, .thread_state, .comment_number,
            .repo_slug, .type, .url, .reason, .title
        ] | @tsv' 2>"$DATA_DIR/log"
    )"

    [ -n "$DEBUG" ] && echo "$resp"

    headers="$(awk -v 'RS=\r\n\r\n' 'NR==1 {print}' <<<"$resp")"
    body="$(awk -v 'RS=\r\n\r\n' 'NR==2 {print}' <<<"$resp")"

   echo "$body" > "$DATA_DIR/body"

    status_code="$(head -n1 <<<"$headers" | cut -d ' ' -f2)"

    last_modified="$(
        grep --ignore-case last-modified <<<"$headers" |
            awk -F ': ' '{print $2}'
    )"

    poll_interval="$(
        grep --ignore-case x-poll-interval <<<"$headers" |
            awk -F ': ' '{print $2}' |
            tr -dc '[:digit:]'
    )"

    if [ -n "$last_modified" ]; then
        echo "$last_modified" >"$DATA_DIR/last-modified"
    fi

    if [ -n "$poll_interval" ]; then
        echo "$poll_interval" >"$DATA_DIR/poll-interval"
    fi

    if [ "$status_code" = "200" ]; then
        echo "There are new GitHub notifications" >&2
        # don't create a desktop notification if the io streams are a tty
        [ -z "$DEBUG" ] && [ -t 0 ] && [ -t 1 ] && exit 0
        process_page "$body"
    elif [ "$status_code" = "304" ]; then
        echo "Up to date on GitHub notifications" >&2
        exit 2
    else
        echo "GitHub responded with status code $status_code" >&2
        exit 1
    fi
}

# Processes a page of GitHub notifications, extracting and formatting relevant details.
process_page() {
    local page="$1" unhashed_number number=""
    while IFS=$'\t' read -r thread_id thread_state comment_number repo_slug type url reason title; do
        if ! command grep -q "^null" <<<"$url"; then
            if ! output=$(process_url "$type" "$url"); then
                return 1
            fi
            read -r number modified_type <<<"$output"
            if [[ -z $number ]]; then
                continue
            fi
        fi

        notify_with_dunst "$thread_id" "$thread_state" "$comment_number" "$repo_slug" \
            "${modified_type:-$type}" "$number" "$reason" "$title" &
    done <<<"$page"
}

# Extracts and formats relevant information from a GitHub URL based on its type
# Returns: a number and optionally a new type, or raises an error for release types
process_url() {
    local type="$1" url="$2" number prerelease
    if command grep -q "Commit" <<<"$type"; then
        # https://blog.cuviper.com/2013/11/10/how-short-can-git-abbreviate/
        command basename "$url" | command head -c 12
    elif command grep -q "Release" <<<"$type"; then
        if IFS=$'\t' read -r number prerelease < <(
            gh api "$url" --cache=100h -H "X-GitHub-Api-Version: 2022-11-28" \
                --jq '[.tag_name, .prerelease] | @tsv'
        ); then
            if "$prerelease"; then
                echo "$number Pre-release"
            else
                echo "$number"
            fi
        fi
    else
        # Minimize gh API calls as they are time-consuming
        echo "${url/*\//#}"
    fi
}

open_in_browser() {
    local unhashed_number thread_id="$1" thread_state="$2" comment_number="$1" repo_slug="$2" type="$3" number="$4"
    unhashed_number=$(command tr -d "#" <<<"$number")
    case "$type" in
        CheckSuite)
            $GH_ND_OPEN_CMD "https://github.com/${repo_slug}/actions" 2>/dev/null &
            ;;
        Commit)
            command gh browse "$number" --repo "$repo_slug"
            ;;
        Discussion)
            $GH_ND_OPEN_CMD "https://github.com/${repo_slug}/discussions/" 2>/dev/null &
            ;;
        Issue | PullRequest)
            if [ -z "$comment_number" ] ||
                [ "$comment_number" = "$unhashed_number" ] ||
                [ "$comment_number" = "null" ]; then
                command gh issue view "$number" --web --repo "$repo_slug"
            else
                $GH_ND_OPEN_CMD "https://github.com/${repo_slug}/issues/${unhashed_number}#issuecomment-${comment_number}" 2>/dev/null &
            fi
            ;;
        Pre-release | Release)
            command gh release view "$number" --web --repo "$repo_slug"
            ;;
        *)
            command gh repo view --web "$repo_slug"
            ;;
    esac
}

notify_with_dunst() {
    local cli_action action_response flags thread_id="$1" thread_state="$2" \
        comment_number="$3" repo_slug="$4" type="$5" number="$6" reason="$7" title="$8"

    # Add dunstify action to open if the gh-notify extension is installed
    # and if the TERMINAL environment variable is set to a supported emulator
    # https://github.com/meiji163/gh-notify
    if gh extension list 2>/dev/null | grep -q 'gh notify' 2>/dev/null &&
        [[ "$TERMINAL" =~ ^(x-terminal-emulator|xterm|wezterm|kitty|alacritty|gnome-terminal|konsole|foot|eterm|st)$ ]]; then
        cli_action="cli,open in gh-notify"
    fi

    action_response=$(
        dunstify "[$repo_slug] $type: $reason" "$title" -a "gh-notify-desktop" \
            ${ICON:+-i "$ICON"} \
            -A "web,open in browser" \
            -A "read,mark as read" \
            -A "done,mark as done" \
            -A "unsub,unsubscribe" \
            ${cli_action:+-A "$cli_action"}
    )

    case "$action_response" in
        read)
            gh_rest_api --method PATCH "/notifications/threads/$thread_id"
            ;;
        done)
            gh_rest_api --method DELETE "/notifications/threads/$thread_id"
            ;;
        unsub)
            gh_rest_api --method DELETE "/notifications/threads/$thread_id/subscription"
            ;;
        web)
            open_in_browser "$comment_number" "$repo_slug" "$type" "$number"
            ;;
        cli)
            [ "$PARTICIPATING" = true ] && flags+=" -p"
            [ "$ALL" = true ] && flags+=" -a"
            $TERMINAL -e sh -c "gh notify$flags"
            ;;
    esac
}

while getopts i:aph opt; do
    case $opt in
        a) ALL=true ;;
        p) PARTICIPATING=true ;;
        i) [ -f "$OPTARG" ] && ICON="$OPTARG" ;;
        h) die ;;
        *) die ;;
    esac
done

shift "$((OPTIND - 1))"

[ -z "$DEBUG" ] && check_poll_interval
check_response_headers
process_page "$body"
